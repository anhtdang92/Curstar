# STAR Project Instructions
# This file contains instructions for the STAR project.

# Project Overview
# STAR is a video super-resolution project based on the NJU-PCALab/STAR repository.
# It uses diffusion models to enhance video quality.

# Setup Instructions
# 1. Clone the repository: git clone https://github.com/anhtdang92/Curstar.git
# 2. Create a virtual environment: python -m venv venv (ensure Python 3.10)
# 3. Activate the virtual environment:
#    - Windows: .\venv\Scripts\Activate.ps1
#    - Linux/Mac: source venv/bin/activate
# 4. Install dependencies: pip install -r requirements.txt
#    Note: This project requires NumPy < 2.0 (e.g., numpy==1.26.4). The requirements.txt should handle this.

# Model Files Checklist
# Ensure the following files exist:
# - pretrained_models/cogvideox/vae/3d-vae.pt
# - pretrained_models/cogvideox/transformer/CogVideoX-5B-based/1/mp_rank_00_model_states.pt
# - pretrained_models/cogvideox/t5-v1_1-xxl/ (with all 8 required files)
# If missing, run download_models.py or download from https://huggingface.co/THUDM/CogVideoX-2b
#
# Note: After setup, you may see temp_* folders (e.g., temp_t5, temp_cogvideox, temp_cogvideo). These are not needed and can be safely deleted.

# Usage Instructions
# - Place input videos in the 'input/video/' directory.
# - Run the inference script: bash video_super_resolution/scripts/inference_sr.sh
#   (This script has been tested and confirmed to work with bash, e.g., Git Bash on Windows.
#    The underlying Python script `inference_sr.py` has also been fixed for an `argparse` issue.)
# - Output videos will be saved in the specified output directory.

# Additional Notes
# - Ensure you have a GPU with at least 24GB of VRAM for optimal performance.
# - For more details, refer to the README.md file.

# Tracked Files
- test_star_inference.py 

# Git Push Note
# If you encounter 'fatal: The current branch main has multiple upstream branches, refusing to push.',
# use the following command to push changes:
#   git push origin main 

# Cursor configuration file
# This file contains settings for the Cursor IDE

# Project settings
project:
  name: STAR
  description: Video Super-Resolution and Enhancement Toolkit
  version: 0.1.0

# Development environment
environment:
  python_version: "3.8+"
  node_version: "18+"
  cuda_version: "11.8+"
  virtual_env: "venv"
  requirements_file: "requirements.txt" # Ensures NumPy < 2.0 is installed

# Running tests
tests:
  script: "run_test.ps1"
  description: "Run STAR inference tests with proper environment setup"
  command: ".\run_test.ps1"
  notes: |
    The test script handles:
    - Virtual environment activation
    - PYTHONPATH configuration
    - Running the inference test

# Editor settings
editor:
  tab_size: 4
  insert_spaces: true
  trim_trailing_whitespace: true
  insert_final_newline: true
  charset: "utf-8"

# Git settings
git:
  ignore:
    - "venv/"
    - "__pycache__/"
    - "*.pyc"
    - ".DS_Store"
    - "results/"
    - "pretrained_models/"
  branch_naming: "feature/description"
  commit_message_format: "type(scope): description"
  protected_branches:
    - "main"
    - "develop"

# Dependencies
dependencies:
  python:
    - torch
    - torchvision
    - numpy
    - opencv-python
    - fastapi
    - uvicorn
    - python-multipart
    - websockets
    - python-jose
    - passlib
    - bcrypt
    - aiofiles
    - python-dotenv
  node:
    - react
    - @mui/material
    - @emotion/react
    - @emotion/styled
    - axios
    - react-dropzone
    - react-player

# Project status
status:
  last_updated: "2024-02-20"
  current_focus: "Web application development"
  completed_tasks:
    - "Basic FastAPI backend structure"
    - "Basic React frontend with Material-UI"
    - "Video upload and preview functionality"
    - "Model selection interface"
    - "Real-time progress tracking UI"
  next_steps:
    - "Integrate STAR processing code into backend"
    - "Implement proper file handling and cleanup"
    - "Add proper error handling and validation"
    - "Implement user authentication system"
    - "Add processing queue management"
    - "Add email notifications for completed jobs"

# Known issues
issues:
  - "WebSocket connection may need reconnection logic for long-running processes"
  - "Need to handle large file uploads properly"
  - "Need to implement proper cleanup of temporary files"
  - "Need to handle CUDA out-of-memory errors gracefully"
  - "Need to implement proper error handling for failed processing jobs"

# Development guidelines
guidelines:
  code_style:
    python: "PEP 8"
    javascript: "Airbnb"
  testing:
    python: "pytest"
    javascript: "jest"
  documentation:
    format: "Markdown"
    required_sections:
      - "Description"
      - "Installation"
      - "Usage"
      - "API Reference"
      - "Contributing"

# Note: PowerShell does not support '&&' for command chaining. Use ';' instead.
# Example: git add .; git commit -m "message"; git push 