# STAR Project Instructions
# This file contains instructions for the STAR project.

# Project Overview
# STAR is a video super-resolution project based on the NJU-PCALab/STAR repository.
# It uses diffusion models to enhance video quality.

# Setup Instructions
# 1. Clone the repository: git clone https://github.com/anhtdang92/Curstar.git
# 2. Create a virtual environment: python -m venv venv (ensure Python 3.10)
# 3. Activate the virtual environment:
#    - Windows: .\venv\Scripts\Activate.ps1
#    - Linux/Mac: source venv/bin/activate
# 4. Install dependencies: pip install -r requirements.txt
#    Note: This project requires NumPy < 2.0 (e.g., numpy==1.26.4). The requirements.txt should handle this.

# Model Files Checklist
# Ensure the following files exist:
# - pretrained_models/cogvideox/vae/3d-vae.pt
# - pretrained_models/cogvideox/transformer/CogVideoX-5B-based/1/mp_rank_00_model_states.pt
# - pretrained_models/cogvideox/t5-v1_1-xxl/ (with all 8 required files)
# If missing, run download_models.py or download from https://huggingface.co/THUDM/CogVideoX-2b
#
# Note: After setup, you may see temp_* folders (e.g., temp_t5, temp_cogvideox, temp_cogvideo). These are not needed and can be safely deleted.

# Usage Instructions
# - Place input videos in the 'input/video/' directory.
# - Run the inference script: bash video_super_resolution/scripts/inference_sr.sh
#   (This script has been tested and confirmed to work with bash, e.g., Git Bash on Windows.
#    The underlying Python script `inference_sr.py` has also been fixed for an `argparse` issue.)
# - Output videos will be saved in the specified output directory.

# Additional Notes
# - Ensure you have a GPU with at least 24GB of VRAM for optimal performance.
# - For more details, refer to the README.md file.

# Tracked Files
- test_star_inference.py 

# Git Push Note
# If you encounter 'fatal: The current branch main has multiple upstream branches, refusing to push.',
# use the following command to push changes:
#   git push origin main 

# Cursor configuration file
# This file contains settings for the Cursor IDE

# Project settings
project:
  name: STAR Video Processing
  description: A modern web application for video processing using FastAPI and Next.js

# Project structure
structure:
  - name: Backend
    path: webapp/backend
    description: FastAPI backend server
  - name: Frontend
    path: webapp/frontend-next
    description: Next.js frontend application

# Development environment
environment:
  python:
    version: "3.9+"
    packages:
      - fastapi==0.109.2
      - uvicorn==0.27.1
      - python-multipart==0.0.9
      - websockets==12.0
      - python-jose==3.3.0
      - passlib==1.7.4
      - bcrypt==4.1.2
      - aiofiles==23.2.1
      - python-dotenv==1.0.1
  node:
    version: "18+"
    packages:
      - next
      - react
      - react-dom
      - @mui/material
      - @emotion/react
      - @emotion/styled
      - react-dropzone
      - react-player
      - axios

# Development servers
servers:
  backend:
    command: cd webapp/backend && python main.py
    port: 8000
    description: FastAPI backend server
  frontend:
    command: cd webapp/frontend-next && npm run dev
    port: 3000
    description: Next.js development server

# Git configuration
git:
  branch: main
  remote: origin
  ignore:
    - node_modules/
    - .next/
    - __pycache__/
    - venv/
    - .env
    - .env.local
    - .DS_Store

# Running tests
tests:
  script: "run_test.ps1"
  description: "Run STAR inference tests with proper environment setup"
  command: ".\run_test.ps1"
  notes: |
    The test script handles:
    - Virtual environment activation
    - PYTHONPATH configuration
    - Running the inference test

# Editor settings
editor:
  tab_size: 4
  insert_spaces: true
  trim_trailing_whitespace: true
  insert_final_newline: true
  charset: "utf-8"

# Project status
status:
  version: "0.1.0"
  stage: "development"
  completed:
    - "Project structure setup"
    - "Backend API implementation"
    - "Frontend UI components"
    - "Video upload functionality"
    - "Model selection"
    - "Real-time progress updates"
    - "Processed video preview"
    - "TypeScript integration"
  in_progress:
    - "Error handling improvements"
    - "Unit tests"
  planned:
    - "CI/CD pipeline"
    - "Production deployment"
    - "User authentication"
    - "Batch processing"
    - "Processing history"
  issues:
    - "Add comprehensive error handling"
    - "Implement unit tests"
    - "Set up CI/CD pipeline"
    - "Configure production deployment"

# Known issues
issues:
  - "WebSocket connection may need reconnection logic for long-running processes"
  - "Need to handle large file uploads properly"
  - "Need to implement proper cleanup of temporary files"
  - "Need to handle CUDA out-of-memory errors gracefully"
  - "Need to implement proper error handling for failed processing jobs"

# Development guidelines
guidelines:
  code_style:
    python: "PEP 8"
    javascript: "Airbnb"
  testing:
    python: "pytest"
    javascript: "jest"
  documentation:
    format: "Markdown"
    required_sections:
      - "Description"
      - "Installation"
      - "Usage"
      - "API Reference"
      - "Contributing"

# Note for Windows/PowerShell users:
# PowerShell does not support '&&' for chaining commands like bash.
# To push your changes, run each command separately:
#   git add .
#   git commit -m "your message"
#   git push origin main
# If you see 'fatal: The current branch main has multiple upstream branches, refusing to push.',
# always use 'git push origin main' to specify the remote and branch.

# Note: PowerShell does not support '&&' for command chaining. Use ';' instead.
# Example: git add .; git commit -m "message"; git push 

# Windows users: To start both backend and frontend servers with one command:
#   start_servers.bat
# This will open two command windows, one for each server.
# Backend will be available at: http://localhost:8000
# Frontend will be available at: http://localhost:3000
#
# The frontend uses Next.js 14.2.x (latest as of May 2025)

# Windows users: To start the backend and auto-activate the venv, use:
#   cd webapp/backend
#   start_backend.bat
# This will activate the virtual environment and run the FastAPI server.

# Windows users: To start the frontend and run the Next.js dev server, use:
#   cd webapp/frontend-next
#   start_frontend.bat
# This will start the Next.js development server and keep the window open for logs.

# Note for Windows/PowerShell users:
# PowerShell does not support '&&' for chaining commands like bash.
# To run batch files, first navigate to the directory, then run the batch file:
#   cd webapp/frontend-next
#   start_frontend.bat
# Or use a semicolon ';' for one-liners:
#   cd webapp/frontend-next; start_frontend.bat 

# Hydration error fix:
# - Material-UI theming is now handled in a client component (theme-provider.tsx)
# - layout.tsx is a server component (no 'use client')
# If you see hydration errors, ensure all browser-only logic is in a client component.

# To automatically add, commit, and push all changes to origin main, use:
#   git_push.bat
# This script will prompt for a commit message and push to origin main. 